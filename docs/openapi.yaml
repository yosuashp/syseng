openapi: 3.0.3
info:
  title: BCR - Car Management API (OpenAPI 3.0)
  version: "1.0"
  description: "API to manage Binar Car Rental service website. This API is a part of fullstack development course individual project by Binar Academy. \n\n User is divided into three roles: superadmin, admin, member \n\n Superadmin default account details can be found on this project documentation. Superadmin account details can also be modified by following the instruction there."
  contact:
    name: sahat parulian
    email: sahatparulian85@gmail.com
    url: https://www.linkedin.com/in/sahat-parulian/
  license:
    name: MIT License
servers:
  - url: http://localhost:8000/api
  - url: http://localhost:8000/api/v1
tags:
  - name: auth
    description: Login or register
  - name: user
    description: Access to user
  - name: cars
    description: Operation about car
  - name: archive
    description: Access archived data
  - name: media
    description: Media data & files operation

paths:
  /register:
    post:
      tags:
        - auth
      summary: Register new member
      description: Register new account with member role
      operationId: registerMember
      security:
        - {}
      requestBody:
        description: Required fields [name, email, password]
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterCred"

      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: create user successfully
                  data:
                    $ref: "#/components/schemas/User"
        "409":
          description: Conflict, email already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: email already registered
        "422":
          description: Unprocessable Entity, check missing fields from requestBody
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingFieldMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /login:
    post:
      tags:
        - auth
      summary: Login with account
      description: Login and get bearer token for auth
      operationId: login
      security:
        - {}
      requestBody:
        description: Required fields [email, password]
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: new@account.com
                password:
                  type: string
                  example: this_password
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: login successfully
                  data:
                    $ref: "#/components/schemas/LoginCred"
        "401":
          description: invalid email / password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: invalid password

        "422":
          description: Unprocessable Entity, check missing fields from requestBody
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingFieldMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /whoami:
    get:
      tags:
        - user
      operationId: whoAmI
      summary: Get current user data
      description: "Return current user data based on bearer token \n\n Allowed roles: superadmin, admin, member"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Get current user information successfully
                  data:
                    $ref: "#/components/schemas/User"

        "401":
          description: Unauthorized, bearer token invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /users:
    get:
      tags:
        - user
      summary: Get current registered users
      description: "Return list of all users  \n\n Allowed roles: superadmin, admin"
      operationId: getUserList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Get user list successfully
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 1
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /admins:
    post:
      tags:
        - user
      operationId: createAdmin
      summary: Add new admin
      description: "Add new admin account  \n\n Allowed roles: superadmin"
      requestBody:
        description: Required fields [name, email, password]
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterCred"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: create user successfully
                  data:
                    $ref: "#/components/schemas/Admin"
        "401":
          description: Unauthorized, bearer token invalid or auth level below superadmin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"

        "409":
          description: Conflict, email already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: email already registered

        "422":
          description: Unprocessable Entity, check missing fields from requestBody
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingFieldMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /images:
    post:
      tags:
        - media
      operationId: uploadImage
      summary: Upload image to server
      description: "Upload image to cloudinary then store the metadata to database \n\n Allowed roles: superadmin, admin"
      requestBody:
        description: Required fields [image]
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Upload image successfully
                  data:
                    $ref: "#/components/schemas/Image"
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"

        "422":
          description: Unprocessable Entity, check missing fields from requestBody
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingFieldMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /images/{imageId}:
    get:
      tags:
        - media
      summary: Get image data by ID
      operationId: getImageData
      description: "Return image data based on the image ID \n\n Allowed roles: superadmin, admin, member"
      parameters:
        - in: path
          name: imageId
          schema:
            type: integer
          required: true
          description: Numeric ID of the image to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Get image data successfully
                  data:
                    $ref: "#/components/schemas/Image"
        "401":
          description: Unauthorized, bearer token invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, image Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Image data not found
        "422":
          description: Unprocessable Entity, check parameter format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

    delete:
      tags:
        - media
      summary: Delete image from server by ID
      operationId: deleteImage
      description: "Delete image from cloudinary and metadata from database based on the image ID \n\n Allowed roles: superadmin, admin"
      parameters:
        - in: path
          name: imageId
          schema:
            type: integer
          required: true
          description: Numeric ID of the image to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Delete image data successfully
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, image Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Image data not found
        "422":
          description: Unprocessable Entity, check parameter format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /cars:
    get:
      tags:
        - cars
      summary: Get car list
      operationId: getCarList
      description: "Return car data list \n\n Allowed roles: superadmin, admin, member"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Get cars data successfully
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CarResponse"
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 1
        "401":
          description: Unauthorized, bearer token invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

    post:
      tags:
        - cars
      summary: Add new car data
      operationId: addNewCar
      description: "Add new car data to database \n\n Allowed roles: superadmin, admin"
      requestBody:
        description: "Required fields [name, size, rent_per_day]"
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - name
                - size
                - rent_per_day
              properties:
                name:
                  type: string
                  example: "Sample Car"
                size:
                  type: string
                  enum:
                    - small
                    - medium
                    - large
                rent_per_day:
                  type: integer
                  example: 50000
                image_id:
                  type: integer
                  example: 1
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Create car data successfully
                  data:
                    $ref: "#/components/schemas/CarRequest"
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"

        "422":
          description: Unprocessable Entity, check missing fields from requestBody
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingFieldMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /cars/{carId}:
    get:
      tags:
        - cars
      summary: Get car data by ID
      operationId: getCarData
      description: "Return car data based on the car ID \n\n Allowed roles: superadmin, admin, member"
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
          description: Numeric ID of the car to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Get car data successfully
                  data:
                    $ref: "#/components/schemas/CarResponse"
        "401":
          description: Unauthorized, bearer token invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, car Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Car data not found
        "422":
          description: Unprocessable Entity, check parameter format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

    put:
      tags:
        - cars
      summary: Edit car data by ID
      operationId: editCarData
      description: "Modify car data based on the car ID \n\n Allowed roles: superadmin, admin"
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
          description: Numeric ID of the car to edit
      requestBody:
        description: "Allowed fields to update: [name, size, rent_per_day, image_id]"
        content:
          aplication/json:
            schema:
              $ref: "#/components/schemas/CarRequest"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Update car data successfully
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, car Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Car data not found
        "422":
          description: Unprocessable Entity, check parameter format / allowed fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

    delete:
      tags:
        - cars
      summary: Delete car data by ID
      operationId: deleteCarData
      description: "Delete car data based on the car ID \n\n Allowed roles: superadmin, admin"
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
          description: Numeric ID of the car to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Delete car data successfully
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, car Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Car data not found
        "422":
          description: Unprocessable Entity, check parameter format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /archive/cars:
    get:
      tags:
        - archive
      summary: Get archived car data list
      operationId: getArchivedCarList
      description: "Return deleted / archived car data list \n\n Allowed roles: superadmin, admin"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Get archived cars data successfully
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ArchivedCarResponse"
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 1
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /archive/cars/{carId}:
    get:
      tags:
        - archive
      summary: Get archived car data by ID
      operationId: getArchivedCarData
      description: "Return archived car data based on the car ID \n\n Allowed roles: superadmin, admin"
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
          description: Numeric ID of the car to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Get archived car data successfully
                  data:
                    $ref: "#/components/schemas/ArchivedCarResponse"
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, car Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Archived car data not found
        "422":
          description: Unprocessable Entity, check parameter format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

    delete:
      tags:
        - archive
      summary: Destroy archived car data by ID
      operationId: deleteArchivedCarData
      description: "Destroy permanently archived car data based on the car ID \n\n Allowed roles: superadmin, admin"
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
          description: Numeric ID of the car to destroy
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Destroy car data successfully
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, car Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Archived car data not found
        "422":
          description: Unprocessable Entity, check parameter format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

  /archive/cars/{carId}/restore:
    get:
      operationId: restoreCar
      tags:
        - archive
      summary: Restore archived car data by ID
      description: "Restore deleted car data based on the car ID \n\n Allowed roles: superadmin, admin"
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
          description: Numeric ID of the car to restore
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Restore car data successfully
        "401":
          description: Unauthorized, bearer token invalid or auth level below admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedMsg"
        "404":
          description: Not Found, car Id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: Archived car data not found
        "422":
          description: Unprocessable Entity, check parameter format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParamMsg"

        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultErrMsg"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DefaultErrMsg:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Error message

    UnauthorizedMsg:
      type: object
      properties:
        status:
          type: string
          example: failed
        message:
          type: string
          example: Unauthorized

    MissingFieldMsg:
      type: object
      properties:
        status:
          type: string
          example: failed
        message:
          type: string
          example: Missing required fields

    InvalidParamMsg:
      type: object
      properties:
        status:
          type: string
          example: failed
        message:
          type: string
          example: Invalid parameter

    Image:
      type: object
      properties:
        id:
          type: integer
          example: 1
        url:
          type: string
          format: url
          example: "https://res.cloudinary.com/dgjwtquka/image/upload/v1664959593/phqnlmh3b7ocuwtdpfvi.jpg"
        public_id:
          type: integer
          example: phqnlmh3b7ocuwtdpfvi

    CarRequest:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: Sample Car
        size:
          type: string
          enum:
            - small
            - medium
            - large
        rent_per_day:
          type: integer
          example: 50000
        image_id:
          type: integer
          example: 1

    CarResponse:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: Sample Car
        size:
          type: string
          enum:
            - small
            - medium
            - large
        rent_per_day:
          type: integer
          example: 50000
        image:
          $ref: "#/components/schemas/Image"
        createdBy:
          $ref: "#/components/schemas/SimpleUser"
        createdAt:
          type: string
          format: timestamp
          example: "2022-10-18T11:40:19.301Z"
        updatedBy:
          $ref: "#/components/schemas/SimpleUser"
        updatedAt:
          type: string
          format: timestamp
          example: "2022-10-18T11:40:19.301Z"

    ArchivedCarResponse:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: Sample Car
        size:
          type: string
          enum:
            - small
            - medium
            - large
        rent_per_day:
          type: integer
          example: 50000
        image:
          $ref: "#/components/schemas/Image"
        createdBy:
          $ref: "#/components/schemas/SimpleUser"
        createdAt:
          type: string
          format: timestamp
          example: "2022-10-18T11:40:19.301Z"
        deletedBy:
          $ref: "#/components/schemas/SimpleUser"
        deletedAt:
          type: string
          format: timestamp
          example: "2022-10-18T11:40:19.301Z"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: yosua parulian
        email:
          type: string
          format: email
          example: yosuaparulian@gmail.com
        role:
          type: string
          enum:
            - member
            - admin
            - superadmin
          example: member

    Admin:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: yosua parulian
        email:
          type: string
          format: email
          example: yosua@gmail.com
        role:
          type: string
          enum:
            - member
            - admin
            - superadmin
          example: admin

    SimpleUser:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: yosua parulian

    RegisterCred:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: yosua parulian
        email:
          type: string
          format: email
          example: yosua@gmail.com
        password:
          type: string
          example: this_password

    LoginCred:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: yosua paruian
        email:
          type: string
          format: email
          example: yosua@gmailcom
        role:
          type: string
          enum:
            - member
            - admin
            - superadmin
        token:
          type: string
          format: token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiZW1haWwiOiJtZW1iZXJAbWVtYmVyLmNvbSIsImNyZWF0ZWRBdCI6IjIwMjItMTAtMThUMDY6MzA6NTguOTg3WiIsInVwZGF0ZWRBdCI6IjIwMjItMTAtMThUMDY6MzA6NTguOTg3WiIsImlhdCI6MTY2NjA4MzEyOH0.k_SEHG41C-4cX4ruRRLOaLZqDZBNpTmMtYgGGw0XqAA"

security:
  - bearerAuth: []
